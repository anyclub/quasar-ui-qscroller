(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["d99106a2"],{2514:function(e,t,n){"use strict";var a=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("section",{staticClass:"page-header"},[n("div",{staticClass:"text-h1 project-name"},[e._v("QScroller")]),n("div",{staticClass:"text-h2 project-tagline"},[e._v("Embeddable Scrollers for your Quasar App")]),e._m(0),n("div",{staticClass:"quasar"},[e._v("A Quasar Framework Component and App Extension")]),e._m(1),n("q-btn",{staticClass:"btn",attrs:{type:"a",href:"https://github.com/quasarframework/quasar-ui-qscroller",target:"_blank",label:"View on GitHub","no-caps":"",flat:""}}),n("q-btn",{staticClass:"btn",attrs:{to:"/docs",label:"Docs","no-caps":"",flat:""}}),n("q-btn",{staticClass:"btn",attrs:{to:"/examples",label:"Examples","no-caps":"",flat:""}}),n("q-btn",{staticClass:"btn",attrs:{to:"/demo",label:"Interactive Demo","no-caps":"",flat:""}}),n("q-btn",{staticClass:"btn",attrs:{type:"a",href:"https://github.com/users/hawkeye64/sponsorship",target:"_blank",label:"Donate","no-caps":"",flat:""}})],1),n("main",{staticClass:"flex flex-start justify-center inset-shadow"},[n("div",{staticClass:"q-pa-md col-12-sm col-8-md col-6-lg inset-shadow",staticStyle:{width:"100%",height:"3px"}}),n("div",{staticClass:"q-pa-md col-12-sm col-8-md col-6-lg bg-white shadow-1",staticStyle:{"max-width":"800px",width:"100%"}},[e._t("default")],2)])])},r=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"byline"},[e._v("Created and maintained by Jeff Galbraith "),n("a",{attrs:{href:"https://twitter.com/jgalbraith64",target:"_blank",title:"Twitter"}},[n("i",{staticClass:"fab fa-twitter"})])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"donate"},[n("a",{attrs:{href:"https://github.com/sponsors/hawkeye64",target:"_blank",title:"Donate"}},[n("i",{staticClass:"fas fa-heart",staticStyle:{color:"red"}})])])}],o={name:"Hero"},s=o,i=n("2877"),l=Object(i["a"])(s,a,r,!1,null,null,null);t["a"]=l.exports},"8b24":function(e,t,n){"use strict";n.r(t);var a=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("hero",[n("q-markdown",{attrs:{src:e.markdown,toc:""},on:{data:e.onToc}}),n("component-api",{attrs:{title:"QScroller API",json:e.json}}),n("q-markdown",[e._v("\n# Donate\nIf you appreciate the work that went into this, please consider donating to [Quasar](https://donate.quasar.dev) or [Jeff](https://github.com/sponsors/hawkeye64).\n\n---\n\nThis page created with [QMarkdown](https://quasarframework.github.io/app-extension-qmarkdown), another great Quasar App Extension.\n    ")]),n("q-page-scroller",{attrs:{position:"bottom-right","scroll-offset":150,offset:[18,18]}},[n("q-btn",{attrs:{fab:"",icon:"keyboard_arrow_up",color:"primary"}})],1)],1)},r=[],o=n("2514"),s="QScroller\n===\n\n> Please note, this is currently a very much work-in-progress (WIP). This component recently went through a very rigorous rewrite/refactor to improve on some issues. The documentation and examples will continuously be improved.\n\n::: warning\nIf you were using a previous version, please read the information below for converting to the new version, in particular the `view` property. This may be the only change you need to make (hopefully). If you used the property `hour24-format` the default is now 24 hour format. If you want 12 hour format, use the new `hour12` property.\n:::\n\n**QScroller** is a powerful selection component that plugs right into your Quasar application.\n\n# Features\nThere are many sub-views available within the component:\n- string\n- time\n- time-range\n- date\n- date-range\n- date-time\n\n# Installation Types\n\n## Quasar CLI\n\n**App Extension**\n\n:::\n#### Install\n\nTo add as an App Extension to your Quasar application, run the following (in your Quasar app folder):\n```\nquasar ext add @quasar/qscroller\n```\n\n#### Uninstall\n\nTo remove as an App Extension from your Quasar application, run the following (in your Quasar app folder):\n```\nquasar ext remove @quasar/qscroller\n```\n\n#### Describe\nWhen installed as an App Extension, you can use `quasar describe QScroller`\n:::\n\n**OR**:\n\n:::\nCreate and register a boot file:\n\n```js\nimport Vue from 'vue'\nimport Plugin from '@quasar/quasar-ui-qscroller'\nimport '@quasar/quasar-ui-qscroller/dist/index.css'\n\nVue.use(Plugin)\n```\n:::\n\n**OR**:\n\n:::\n```html\n<style src=\"@quasar/quasar-ui-qscroller/dist/index.css\"></style>\n\n<script>\nimport { Component as QScroller } from '@quasar/quasar-ui-qscroller'\n\nexport default {\n  components: {\n    QScroller\n  }\n}\n<\/script>\n```\n:::\n\n## Vue CLI project\n\n:::\n```js\nimport Vue from 'vue'\nimport Plugin from '@quasar/quasar-ui-qscroller'\nimport '@quasar/quasar-ui-qscroller/dist/index.css'\n\nVue.use(Plugin)\n```\n:::\n\n**OR**:\n\n:::\n```html\n<style src=\"@quasar/quasar-ui-qscroller/dist/index.css\"></style>\n\n<script>\nimport { Component as QScroller } from '@quasar/quasar-ui-qscroller'\n\nexport default {\n  components: {\n    QScroller\n  }\n}\n<\/script>\n```\n:::\n\n## UMD variant\n\nExports `window.QScroller`.\n\nAdd the following tag(s) after the Quasar ones:\n\n:::\n```html\n<head>\n  \x3c!-- AFTER the Quasar stylesheet tags: --\x3e\n  <link href=\"https://cdn.jsdelivr.net/npm/@quasar/quasar-ui-qscroller/dist/index.min.css\" rel=\"stylesheet\" type=\"text/css\">\n</head>\n<body>\n  \x3c!-- at end of body, AFTER Quasar script(s): --\x3e\n  <script src=\"https://cdn.jsdelivr.net/npm/@quasar/quasar-ui-qscroller/dist/index.umd.min.js\"><\/script>\n</body>\n```\nIf you need the RTL variant of the CSS, then go for the following (instead of the above stylesheet link):\n```html\n<link href=\"https://cdn.jsdelivr.net/npm/@quasar/quasar-ui-qscroller/dist/index.rtl.min.css\" rel=\"stylesheet\" type=\"text/css\">\n```\n:::\n\n[UMD Example on Codepen (TBD)](https://codepen.io/Hawkeye64/pen/RwwwKQL)\n\n# Information\n\n## Docs\nCan be found [here](https://quasarframework.github.io/quasar-ui-qscroller).\n\n## Examples\nCan be found [here](https://quasarframework.github.io/quasar-ui-qscroller/examples).\n\n## Interactive Demo\nCan be found [here](https://quasarframework.github.io/quasar-ui-qscroller/demo).\n\n## Demo (source) Project\nCan be found [here](https://github.com/quasarframework/quasar-ui-qscroller/tree/master/demo).\n\n---\n\n# Converting from previous version\n\n- `hour24-format` no longer exists. The default is now a 24-hour clock. If you wish to show a 12-hour clock, use the `hour12` property\n- `color` has been renamed `text-color`\n- `background-color` has been renamed `color`\n- `inner-color` has been renamed `inner-text-color`\n- `inner-background-color` has been renamed to `inner-color`\n- some properties have been temporarily removed: `short-year-label`, `short-month-label`, `short-day-label`, and `show-weekday-label`. Other properties that were not programmed have also been removed (ie: min/max props)\n\n---\n\n# Working with QScroller\n\nIn order to get the best potential from QScroller it is important to understand all aspects which will be described below.\n\nFirst and foremost, the native date format used internally for date-types, and with the v-model, is `YYYY-mm-dd`. This is to avoid confusion with positioning of the day and month in other date format locales as well as date separator. All incoming and outgoing dates will use this format.\n\nThe internal time format used internally for time-types is 24-hour clock (`HH:mm`) or also known as military time.\n\nThe default locale of QScroller is **en-us**. This can easily be changed via the `locale` property. Any area of each scroller that displays text and numbers is locale-aware.\n\nThe external div of the Scroller is set to take 100% width and height. Therefore, it is very important to either wrap it with a width/height controlling div, or set the height and width via the `style` attribute:\n\n```html\n    <q-scroller\n      v-model=\"value\"\n      view=\"date\"\n      style=\"max-width: 280px; height: 200px;\"\n    ></q-scroller>\n```\n\nQScroller can also be customized with any sort of color. Whether it be from the [Quasar Color Pallete](https://quasar.dev/style/color-palette), CSS named color (ie: `ghostwhite`), any rgb(a), hls(a) or # color (`#ccc`).\n\n# QScroller views\n\nQScroller has a property `view` which can take one of the following:\n- string\n- time\n- time-range\n- date\n- date-range\n- date-time\n\n\n## string view\n\n![QScroller](statics/q-scroller.png =200x200)\n\n\nThe `string` view can take any type of arbitray data and display it in a list-like manner so an item can be selected. All other scrollers have this base functionality. Some scrollers, will be based on multiple instances of this functionality.\n\nEach row in a scroller instance is a **QBtn**. As a result of this, you have all of the properties available to you as you would for QBtn. However, this only applies to `string` view as the other scrollers generate data for selection (being based on dates and times).\n\nThe data pushed into the `items` propery of the `string` view is an array of objects, that looks like the properties for **QBtn**. Only the `value` property is required when you pass in an array of objects.\n\nExample:\n\n```js\ndata: [\n  { value: 'Anteater', noCaps: true, icon: '', iconRight: '', disabled: false, align: 'around' },\n  { value: 'Baboons', noCaps: true, icon: '', iconRight: '', disabled: false, align: 'around' },\n  { value: 'Cheetah', noCaps: true, icon: '', iconRight: '', disabled: false, align: 'around' },\n  { value: 'Chimpanzee', noCaps: true, icon: '', iconRight: '', disabled: false, align: 'around' },\n  ...\n]\n```\n\nAdditionally, there is one other property that can be added to the array of objects and this is the `display` property.\n\nFor example:\n```js\n{ value: '1', display: 'Anteater', noCaps: true, icon: '', iconRight: '', disabled: false, align: 'around' },\n```\n\nWhen this property is available, this is what will be displayed to the User, but when selected, it's the `value` that will updated using the emit for the `input` event.\n\nThen, your `v-model` variable should contain a `value` from your list for an initial selection. And, the `v-model` variable will be populated with  `value` data upon user selection. If your `v-model` does not contain a proper match, the first item in the list will automatically be selected.\n\n## time view\n\n![Time view](statics/q-time-scroller.png =200x200) ![Time view-ampm](statics/q-time-scroller-ampm.png =200x200)\n\nWhen `view=\"time\"` the scroller will show the current time clock. If the `v-model` contains an empty string, the current time will be selected. And, the emit for `input` will be a string.\n\nUsing the `hour12` property will show the ante meridiem (AM) and post meridiem (PM) periods. To change the values of `AM` or `PM`, use the `am-pm-labels` property.\n\nThe `v-model` can take types containing String, Array, Object, or Date. See the `v-model` section below on usage.\n\n## time-range view\n\n![time-range view](statics/q-time-range-scroller.png =200x200) ![time-range view-ampm](statics/q-time-range-scroller-ampm.png =200x200)\n\nWhen `view=\"time-range\"` the scroller will show the current time clock in a start and an end section. If the `v-model` contains an empty string, the current time will be selected. And, the emit for `input` will be a string.\n\nUsing the `hour12` property will show the ante meridiem (AM) and post meridiem (PM) periods. To change the values of `AM` or `PM`, use the `am-pm-labels` property.\n\nIf the end section becomes less than the start section, a color indicator will be used. You can change the color using the `error-color` and `error-text-color` properties. Should this occur, the `invalid-range` event will be emitted. It contains an object with keys `startDate` and `endDate` which contains the string representation of the times.\n\nThe `v-model` can take an array of types containing String, Array, Object, or Date. See the `v-model` section below on usage.\n\n## date view\n\n![date view](statics/q-date-scroller.png =200x200)\n\nWhen `view=\"date\"` the scroller will show dates. If the `v-model` contains an empty string, the current date will be selected. And, the emit for `input` will be a string. The default is 5 years before and after the current date. You can control this with the `year-begin` and `year-stop` properties.\n\nThe `v-model` can take types containing String, Array, Object, or Date. See the `v-model` section below on usage.\n\n## date-range view\n\n![date-range view](statics/q-date-range-scroller.png =300x300)\n\nWhen `view=\"date-range\"` the scroller will show the dates in a start and end section. If the `v-model` contains an empty string, the current date will be selected for both. And, the emit for `input` will be a string. The default is 5 years before and after the current date. You can control this with the `start-year-begin`, `start-year-stop`, `end-year-begin` and `end-year-stop` properties for the respective start and end sections.\n\nIf the end section becomes less than the start section, a color indicator will be used. You can change the color using the `error-color` and `error-text-color` properties. Should this occur, the `invalid-range` event will be emitted. It contains an object with keys `startDate` and `endDate` which contains the string representation of the currently selected dates.\n\nThe `v-model` can take an array of types containing String, Array, Object, or Date. See the `v-model` section below on usage.\n\n\n## date-time view\n\n![date-time view](statics/q-date-time-scroller.png =300x300) ![date-time view-ampm](statics/q-date-time-scroller-ampm.png =300x300)\n\nWhen `view=\"date-time\"` the scroller will show date and time selection. If the `v-model` contains an empty string, the current date and time will be selected. And the emit for `input` will be a string. The default is 5 years before and after the current date. You can control this with the `year-begin` and `year-stop` properties.\n\nUsing the `hour12` property will show the ante meridiem (AM) and post meridiem (PM) periods. To change the values of `AM` or `PM`, use the `am-pm-labels` property.\n\nThe `v-model` can take types containing String, Array, Object, or Date. See the `v-model` section below on usage.\n\n# Locale\n\nThe default locale is `en-us`. To change it, use the `locale` property and pass an appropriate locale.\n\n# Colorizing\n\nAnywhere you see a `color`-type property, this refers to the background. `text-color` refers to the foreground, or text, color.\n\nFor any color property, you can use any color from the [Quasar Color Pallete](https://quasar.dev/style/color-palette), CSS named color, any rgb(a), hls(a) or # color.\n\n# Error indicator\n\nWhenever a date or time range is used, the sections are known as `start` and `end`. If the `end` section is less than the `start` section, the `color` and `text-color` will change to indicate an error. The defaults are variants of red. You can change this to your own color by setting the `error-color` and `error-text-color` respectively.\n\nAlso, when this occurs, the the `invalid-range` will be emitted with an object containing the data from the start and end sections.\n\n\n# v-model\nFor all view types, except `string`, you can pass `v-model` data as a `String`, `Object`, `Array` or `Date`. Whatever is passed in will be the same as passed out in the `input` event. If `v-model` is an empty string, then the `String` type will be used.\n\nAll number can be `Number` or `String` (quoted) values; examples below of mixed values.\n\nWhere `view=\"time\"` you can use the following for `v-model`:\n\n```js\n  data () {\n    return {\n      valueStr: '09:00',\n      valueObj: { hour: '09', minute: '10' },\n      valueArr: [ '09', '20'],\n      valueDate: new Date()\n    }\n  },\n```\n\nWhere `view=\"date\"` you can use the following for `v-model`:\n\n```js\n  data () {\n    return {\n      valueStr: '2020-10-01',\n      valueObj: { year: '2020', month: '11', day: 10 },\n      valueArr: [ 2020, 12, '25'],\n      valueDate: new Date()\n    }\n  },\n```\n\nWhere `view=\"time-range\"` you can use the following for `v-model`:\n\n```js\n  data () {\n    return {\n      valueStr: ['09:00','09:00'],\n      valueObj: [{ hour: '09', minute: '10' },{ hour: '09', minute: '10' }],\n      valueArr: [[ '09', '20'],[ '09', '20']],\n      valueDate: [new Date(), new Date()]\n    }\n  },\n```\n\nWhere `view=\"date-range\"` you can use the following for `v-model`:\n\n```js\n  data () {\n    return {\n      valueStr: [ '2020-10-01', '2020-10-01' ],\n      valueObj: [{ year: '2020', month: '11', day: 10 }, { year: '2020', month: '11', day: 10 }],\n      valueArr: [[ 2020, 12, '25' ], [ 2020, 12, '25' ]],\n      valueDate: [new Date(), new Date()]\n    }\n  },\n```\n\nAnd finally, where `view=\"date-time\"` you can use the following for `v-model`:\n\n```js\n  data () {\n    return {\n      valueStr: '2020-10-01 10:10',\n      valueObj: { year: '2020', month: '11', day: 10, hour: 12, minute: 35 },\n      valueArr: [ 2020, 12, '25', '08', '05'],\n      valueDate: new Date()\n    }\n  },\n```\n\n::: info\nWhatever format is used for the `v-model` will be the same format returned via the `value` emit.\n:::\n",i=n("384e"),l={name:"PageIndex",components:{Hero:o["a"]},data:function(){return{markdown:s,json:i["a"]}},computed:{toc:{get:function(){return this.$store.state.common.toc},set:function(e){this.$store.commit("common/toc",e)}}},methods:{onToc:function(e){e.push({id:"QScroller-API",label:"QScroller API",level:1,children:Array(0)}),e.push({id:"Donate",label:"Donate",level:1,children:Array(0)}),this.toc=e}}},c=l,h=n("2877"),d=Object(h["a"])(c,a,r,!1,null,null,null);t["default"]=d.exports}}]);